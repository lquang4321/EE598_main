/*-----03/08/2021----*/
/*-----CompactPCR----*/
#include <Arduino.h>            // If you are using Arduino IDE, you can remove or ignore this line.
#include <Adafruit_AS7341.h>    // Color sensor library
#include <Plotter.h>            // Displays 2D Graph of X vs Y
#include <Wire.h>               // I2C library
#include <RotaryEncoder.h>      // Encoder 
#include <Adafruit_I2CDevice.h>
#include <lcdgfx.h>              //GUI
#include <lcdgfx_gui.h>          //GUI   

/*--------READ BAT VOLTAGE---------*/
#define VBATPIN A7
#define VBAT_MV_PER_LSB   (0.73242188F)   // for 12bit
#define VBAT_DIVIDER      (0.71275837F)   // 2M + 0.806M voltage divider on VBAT = (2M / (0.806M + 2M))
#define VBAT_DIVIDER_COMP (1.403F)        // Compensation factor for the VBAT divider
#define REAL_VBAT_MV_PER_LSB (VBAT_DIVIDER_COMP * VBAT_MV_PER_LSB)
/*--------READ BAT VOLTAGE---------*/


/*--------COLOR SENSOR---------*/
Adafruit_AS7341 as7341;
/*--------COLOR SENSOR---------*/

/*--------ENCODER---------*/
#define ENC_A     15
#define ENC_B     11
#define ENC_BTN   27
int counter = 0;
int encRead = 0;
/*--------ENCODER---------*/


/*--------OLED STUFF---------*/
DisplaySSD1306_128x64_I2C display(-1);
/*--------OLED STUFF---------*/

#define mainPAGE 0
#define setupPAGE 1
#define sensorPAGE 2
#define aboutPAGE 3
#define setTempPAGE 3
#define setCyclePAGE 4

#define menuSel_0 0
#define menuSel_1 1
#define menuSel_2 2
#define menuSel_3 3

uint8_t curPAGE = 0;
uint8_t selection = 0;
SAppMenu menu;
SAppMenu sensors;
SAppMenu set_up;
SAppMenu about;

SAppMenu setTemp;
SAppMenu setCycle;

char str[15];

const char *menuPG[] =
{
    "Setup"      ,"Sensors"           , "About",
};
const char *sensorPG[] =
{
    "Back" ,
};
const char *set_upPG[] =
{
    "Set Temp"   ,"Set Cycle"      ,"Back"           ,
};
const char *aboutPG[] =
{
    "COMPACT PCR","EE598 Senior II","Spr'2021","BACK",
};

//LcdGfxMenu menu( menuPG[curPAGE], sizeof(menuPG[curPAGE]) / sizeof(char *), {0,9} );
/*--------GUI MENU---------*/

/*--------THERMISTOR---------*/
//https://learn.adafruit.com/thermistor/using-a-thermistor

// which analog pin to connect
#define THERMISTORPIN A2
// resistance at 25 degrees C
#define THERMISTORNOMINAL 10000
// temp. for nominal resistance (almost always 25 C)
#define TEMPERATURENOMINAL 25
// how many samples to take and average, more takes longer
// but is more 'smooth'
#define NUMSAMPLES 10
// The beta coefficient of the thermistor (usually 3000-4000)
#define BCOEFFICIENT 3950
// the value of the 'other' resistor
#define SERIESRESISTOR 10000

int samples[NUMSAMPLES];
/*--------THERMISTOR---------*/

/*--------PID---------*/
// http://brettbeauregard.com/blog/2017/06/introducing-proportional-on-measurement/

#define HeaterPIN 16

unsigned long lastTime;
double Input, Output, Setpoint;
double ITerm, lastInput;
double kp = 0, ki = 0, kd = 0;
int SampleTime = 100; //1 sec
double outMin, outMax;
bool inAuto = false;

#define MANUAL 0
#define AUTOMATIC 1
/*--------PID---------*/

/*--------Plotter---------*/
double w, x, z, F8_680;
int y;
Plotter p;
/*--------Plotter---------*/

/*--------Millis Delay------*/
unsigned long currentTime;
const long eventTime_1 = 1;  //in ms
const long eventTime_2 = 50;  //in ms
const long eventTime_3 = 50;  //in ms


unsigned long previousTime_1 = 0;
unsigned long previousTime_2 = 0;
unsigned long previousTime_3 = 0;

/*--------Millis Delay------*/

void Compute()
{
   if(!inAuto) return;
   unsigned long now = millis();
   int timeChange = (now - lastTime);
   if(timeChange>=SampleTime)
   {
      /*Compute all the working error variables*/
      double error = Setpoint - Input;
      ITerm+= (ki * error);
      if(ITerm> outMax) ITerm= outMax;
      else if(ITerm< outMin) ITerm= outMin;
      double dInput = (Input - lastInput);

      /*Compute PID Output*/
      Output = kp * error + ITerm- kd * dInput;
      if(Output> outMax) Output = outMax;
      else if(Output < outMin) Output = outMin;

      /*Remember some variables for next time*/
      lastInput = Input;
      lastTime = now;
   }
}


void SetTunings(double Kp, double Ki, double Kd)
{
  double SampleTimeInSec = ((double)SampleTime)/1000;
   kp = Kp;
   ki = Ki * SampleTimeInSec;
   kd = Kd / SampleTimeInSec;
}

void SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
   {
      double ratio  = (double)NewSampleTime
                      / (double)SampleTime;
      ki *= ratio;
      kd /= ratio;
      SampleTime = (unsigned long)NewSampleTime;
   }
}

void SetOutputLimits(double Min, double Max)
{
   if(Min > Max) return;
   outMin = Min;
   outMax = Max;

   if(Output > outMax) Output = outMax;
   else if(Output < outMin) Output = outMin;

   if(ITerm> outMax) ITerm= outMax;
   else if(ITerm< outMin) ITerm= outMin;
}

void Initialize()
{
   lastInput = Input;
   ITerm = Output;
   if(ITerm> outMax) ITerm= outMax;
   else if(ITerm< outMin) ITerm= outMin;
}

void SetMode(int Mode)
{
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
    {  /*we just went from manual to auto*/
        Initialize();
    }
    inAuto = newAuto;
}

float getTemp(){
    uint8_t i;
    float average;
    
    // take N samples in a row, with a slight delay
    for (i=0; i< NUMSAMPLES; i++) {
        samples[i] = analogRead(THERMISTORPIN);
    }
    
    // average all the samples out
    average = 0;
    for (i=0; i< NUMSAMPLES; i++) {
        average += samples[i];
    }
    average /= NUMSAMPLES;
    
    // convert the value to resistance
    average = 1023 / average - 1;
    average = SERIESRESISTOR / average;
    
    float steinhart;
    steinhart = average / THERMISTORNOMINAL;     // (R/Ro)
    steinhart = log(steinhart);                  // ln(R/Ro)
    steinhart /= BCOEFFICIENT;                   // 1/B * ln(R/Ro)
    steinhart += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To)
    steinhart = 1.0 / steinhart;                 // Invert
    steinhart -= 273.15;                         // convert absolute temp to C

    return steinhart;
}

float readBAT(int pin){
    float avg = 0;
    analogReference(AR_INTERNAL_3_0);
    analogReadResolution(12);

    for( uint8_t i = 0; i< 20; i++){
        avg += analogRead(pin);
    }
    analogReference(AR_DEFAULT);
    analogReadResolution(10);

    float measuredvbat = avg / 20;

    return measuredvbat * REAL_VBAT_MV_PER_LSB / 1000;
}

void mainPageSELECTION()
{
    if( selection == menuSel_0 && curPAGE == mainPAGE)          //Setup
    {
        curPAGE = setupPAGE;
        display.updateMenu(&set_up);
        display.showMenu(&set_up);
        
    }else if( selection == menuSel_1 && curPAGE == mainPAGE)    //Sensors
    {
        curPAGE = sensorPAGE;
        display.showMenu(&sensors); 
        display.updateMenu(&sensors);  

    }else if( selection == menuSel_2 && curPAGE == mainPAGE)    //About
    {
        curPAGE = aboutPAGE;
        display.showMenu(&about); 
        display.updateMenu(&about);   
    }
}
void setupPageSELECTION()
{
    if( selection == menuSel_0 && curPAGE == setupPAGE)         //Set temp
    {
        curPAGE = setTempPAGE;
        display.updateMenu(&setTemp);
        display.showMenu(&setTemp);
        
    }else if( selection == menuSel_1 && curPAGE == setupPAGE)   //Set Cycle
    {
        curPAGE = setCyclePAGE;
        display.showMenu(&setCycle); 
        display.updateMenu(&setCycle);   
    }else if( selection == menuSel_2 && curPAGE == setupPAGE)   //Back to main menu
    {
        curPAGE = mainPAGE;
        display.showMenu(&menu); 
        display.updateMenu(&menu);   
    }
};

void sensorPageSELECTION()
{
    if( (selection == menuSel_0 ) && curPAGE == sensorPAGE)          //Back to main menu
    {
        curPAGE = mainPAGE;
        display.updateMenu(&menu);
        display.showMenu(&menu);
        
    }
};

void aboutPageSELECTION()
{
    if( selection == menuSel_3 && curPAGE == aboutPAGE)          //Back to main menu
    {
        curPAGE = mainPAGE;                                      //Set back to main page
        display.updateMenu(&menu);                               //Show main menu
        display.showMenu(&menu);
        
    }
};

void page(){

    if ( encRead ){
        //Serial.printf("Val: %d Select: %d Dir:", encRead, selection);

        if ( encRead > 0 ){
            /* move menu cursor up and refresh menu on the display */
            switch (curPAGE)
            {
                case mainPAGE:
                    display.menuUp(&menu);
                    selection = display.menuSelection(&menu);
                    display.showMenu(&menu);
                    break;
                case setupPAGE:
                    display.menuUp(&set_up);
                    selection = display.menuSelection(&set_up);
                    display.showMenu(&set_up);
                    break;
                case sensorPAGE:
                    display.menuUp(&sensors);
                    selection = display.menuSelection(&sensors);
                    display.showMenu(&sensors);
                    break;
                case aboutPAGE:
                    display.menuUp(&about);
                    selection = display.menuSelection(&about);
                    display.showMenu(&about);
                    break;
                default:
                    break;
            }
            counter++;
            //Serial.println("Up");

        }
        else{
            switch (curPAGE)
            {
                case mainPAGE:
                    display.menuDown(&menu);
                    selection = display.menuSelection(&menu);
                    display.showMenu(&menu);
                    break;
                case setupPAGE:
                    display.menuDown(&set_up);
                    selection = display.menuSelection(&set_up);
                    display.showMenu(&set_up);
                    break;
                case sensorPAGE:
                    display.menuDown(&sensors);
                    selection = display.menuSelection(&sensors);
                    display.showMenu(&sensors);
                    break;
                case aboutPAGE:
                    display.menuDown(&about);
                    selection = display.menuSelection(&about);
                    display.showMenu(&about);
                    break;
                default:
                    break;
            }
            counter--;
            //Serial.println("Down");
        }
    }
    display.setTextCursor(22, 0);                       //Set Cursor Pos
    sprintf(str, "B:%d", 0 );       //Read BUTTON status
    display.write(str);  

    if( !digitalRead(ENC_BTN) )
    {
        display.clear();
        while( !digitalRead(ENC_BTN) ){
            display.setTextCursor(22, 0);                       //Set Cursor Pos
            sprintf(str, "B:%d", 1 );       //Read BUTTON status
            display.write(str);  
        } ;

        mainPageSELECTION();
        sensorPageSELECTION();
        setupPageSELECTION();
        aboutPageSELECTION();
        //LcdGfxMenu menu( menuPG[curPAGE], sizeof(menuPG[curPAGE]) / sizeof(char *), {0,9} );
        //display.createMenu(&menu, menuPG[curPAGE], sizeof(menuPG[curPAGE]) / sizeof(char *), {0,9} );
    }

    if( curPAGE == sensorPAGE && (currentTime - previousTime_3 >= eventTime_3) )
    {
        display.setTextCursor(0, 11);                       //Set Cursor Pos
        sprintf(str, "SetTmp: %-.0f Cel", x);      //Format into "BATT: 4.20V"
        display.write(str);                                 //Display string 

        display.setTextCursor(0, 20);                       //Set Cursor Pos
        sprintf(str, "CurTmp: %-02d Cel", y);       //Read BUTTON status
        display.write(str);      

        display.setTextCursor(0, 29);                       //Set Cursor Pos
        sprintf(str, "PIDout: %-.0f%%", w);       //Read BUTTON status
        display.write(str); 

        display.setTextCursor(0, 38);                       //Set Cursor Pos
        sprintf(str, "680_nM: %-.1f", F8_680);       //Read BUTTON status
        display.write(str); 

        previousTime_3 = currentTime;
    }
}

void setup(void) {
    //Serial.begin(115200);
    Wire.begin();
    //analogReference(3.43);
    SetOutputLimits(0, 255);

    SetTunings(9, 0.8, 6);
    SetMode(AUTOMATIC);

    Setpoint = 30.0;
    Wire.beginTransmission(0x39);
    as7341.begin();
    as7341.setATIME(65534);
    as7341.setASTEP(0);
    as7341.setGain(AS7341_GAIN_128X);
    as7341.startReading();
    as7341.enableLED(false);

    display.begin();
    display.clear();
    display.setFixedFont(ssd1306xled_font6x8);
    display.createMenu(&menu, menuPG, sizeof(menuPG) / sizeof(char *), {0, 9} );
    display.createMenu(&set_up, set_upPG, sizeof(set_upPG) / sizeof(char *), {0, 9} );
    display.createMenu(&sensors, sensorPG, sizeof(sensorPG) / sizeof(char *), {82, 36} );
    display.createMenu(&about, aboutPG, sizeof(aboutPG) / sizeof(char *), {0, 9} );
    display.showMenu(&menu);
    // Start plotter
    p.Begin();

    // Add 5 variable time graph
    p.AddTimeGraph( "PID", 800, "PID Output %", w, "Setpoint", x, "Temp", y, "Error", z, "F8_680 RED", F8_680 );
    
    pinMode(ENC_BTN, INPUT_PULLUP);
    RotaryEncoder.begin(ENC_A, ENC_B);  // Initialize Encoder
    RotaryEncoder.start();              // Start encoder
}


void loop(void) {
    currentTime = millis();
    encRead = RotaryEncoder.read();
         
    page();

    as7341.readAllChannels( );
    F8_680 = as7341.getChannel(AS7341_CHANNEL_680nm_F8);


    //Serial.print("TargetTemp:");
    //Serial.print(Setpoint);
    //Serial.print(" Temp:");
    //Serial.print(getTemp());
    Setpoint = map(analogRead(A4), 0, 1023, 25, 80);
    Input = getTemp();
    //Serial.print(" Error:");
    //Serial.print(Setpoint - Input);
    Compute();

    //Serial.print(" PID_Output:");
    //Serial.println(Output);
    w = map(Output, 0, 255, 0, 100);
    x = Setpoint;
    y = getTemp();
    z = Setpoint - Input;

    if ( currentTime - previousTime_2 >= eventTime_2) {
        display.setTextCursor(68, 0);                       //Set Cursor Pos
        sprintf(str, "BAT:%-.2fV", readBAT(VBATPIN) );      //Format into "BATT: 4.20V"
        display.write(str);                                 //Display string 

        display.setTextCursor(44, 0);                       //Set Cursor Pos
        sprintf(str, "P:%d", curPAGE);       //Read BUTTON status
        display.write(str);      

        display.setTextCursor(0, 0);                       //Set Cursor Pos
        sprintf(str, "S:%d", selection );       //Read BUTTON status
        display.write(str);  
        // display.clearDisplay();
        // display.setTextSize(1);
        // display.setCursor(0, 0);
        // display.drawLine(0,10,127,10, WHITE);
        // display.fillRect(0, 0, 75, 10, BLACK);
        // display.println(" HOME");
        // display.setCursor(64,0);
        // display.printf("BATT:%-.2fV", readBAT(VBATPIN));

        // display.setCursor(0, cursorPos);
        // display.print(">");

        // display.setCursor(8,12);
        // display.printf("SetTmp: %-.0f Cel", x);

        // display.setCursor(8,20);
        // display.printf("CurTmp: %-02d Cel", y);
        
        // display.setCursor(8,28);
        // display.printf("Encder: %-02d", counter);

        // display.setCursor(8,36);
        // display.printf("PIDout: %-.0f%%", w);

        // display.setCursor(8,44);
        // display.printf("680_nM: %-.1f", F8_680);

        // display.display();

        previousTime_2 = currentTime;
    }
    p.Plot(); // usually called within loop()

    analogWrite(HeaterPIN, Output);

}
